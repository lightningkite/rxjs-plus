- id: okhttp3.RequestBody
  type: type
  template:
    pattern: HttpBody
    imports:
      HttpBody: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.HttpResponse
  type: type
  template: Response

- id: okhttp3.HttpResponse
  type: type
  template: Response

- id: okhttp3.MediaType.parse
  type: call
  template: ~0~

- id: java.net.SocketTimeoutException
  type: type
  template:
    pattern: TimeoutError
    imports:
      TimeoutError: rxjs

- id: com.lightningkite.rx.okhttp.discard
  type: call
  receiver: Single
  template:
    pattern: '~this~.pipe(unsuccessfulAsError, switchMap(x => x.text().then(x => undefined)))'
    imports:
      switchMap: rxjs
      unsuccessfulAsError: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.discard
  type: call
  receiver: Response
  template:
    pattern: 'from(~this~.text()).pipe(map(x => undefined))'
    imports:
      from: rxjs
      map: rxjs

- id: com.lightningkite.rx.okhttp.readText
  type: call
  receiver: Single
  template:
    pattern: '~this~.pipe(unsuccessfulAsError, switchMap(x => x.text()))'
    imports:
      switchMap: rxjs
      unsuccessfulAsError: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.readText
  type: call
  receiver: Response
  template:
    pattern: 'from(~this~.text())'
    imports:
      from: rxjs
      map: rxjs

- id: com.lightningkite.rx.okhttp.readByteArray
  type: call
  receiver: Single
  template:
    pattern: '~this~.pipe(unsuccessfulAsError, switchMap(x => x.blob()))'
    imports:
      switchMap: rxjs
      unsuccessfulAsError: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.readByteArray
  type: call
  receiver: Response
  template:
    pattern: 'from(~this~.blob())'
    imports:
      from: rxjs
      map: rxjs

- id: com.lightningkite.rx.okhttp.readJson
  type: call
  receiver: Single
  debug: true
  template:
    pattern: '~this~.pipe(unsuccessfulAsError, fromJSON<~T0~>(~R0~))'
    imports:
      fromJSON: '@lightningkite/rxjs-plus'
      unsuccessfulAsError: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.readJson
  type: call
  receiver: Response
  debug: true
  template:
    pattern: 'of(~this~).pipe(fromJSON<~T0~>(~R0~))'
    imports:
      of: rxjs
      fromJSON: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.readJsonDebug
  type: call
  receiver: Single
  template:
    pattern: '~this~.pipe(unsuccessfulAsError, fromJSON<~T0~>(~R0~))'
    imports:
      fromJSON: '@lightningkite/rxjs-plus'
      unsuccessfulAsError: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.readJsonDebug
  type: call
  receiver: Response
  template:
    pattern: 'of(~this~).pipe(fromJSON<~T0~>(~R0~))'
    imports:
      of: rxjs
      fromJSON: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.HttpProgress.approximate
  type: get
  template:
    pattern: 'approximateProgress(~this~)'
    imports:
      approximateProgress: '@lightningkite/rxjs-plus'

- id: com.lightningkite.rx.okhttp.WebSocketFrame
  type: call
  template: "{ binary: ~binary~, text: ~text~ }"

- id: com.lightningkite.rx.okhttp.WebSocketFrame
  type: call
  suppliedArguments: ['binary']
  template: "{ binary: ~binary~ }"

- id: com.lightningkite.rx.okhttp.WebSocketFrame
  type: call
  suppliedArguments: ['text']
  template: "{ text: ~text~ }"

- id: com.lightningkite.rx.okhttp.HttpCacheMode.Default
  type: get
  template: '"default"'
- id: com.lightningkite.rx.okhttp.HttpCacheMode.NoStore
  type: get
  template: '"no-store"'
- id: com.lightningkite.rx.okhttp.HttpCacheMode.Reload
  type: get
  template: '"reload"'
- id: com.lightningkite.rx.okhttp.HttpCacheMode.NoCache
  type: get
  template: '"no-cache"'
- id: com.lightningkite.rx.okhttp.HttpCacheMode.ForceCache
  type: get
  template: '"force-cache"'
- id: com.lightningkite.rx.okhttp.HttpCacheMode.OnlyIfCached
  type: get
  template: '"only-if-cached"'

- id: com.lightningkite.rx.okhttp.WebSocketFrame
  type: call
  template: "{ binary: ~binary~, text: ~text~ }"

- id: com.lightningkite.rx.okhttp.toRequestBody
  receiver: Image
  type: call
  template:
    pattern: imageToBody(~this~, ~*~)
    imports:
      imageToBody: '@lightningkite/rxjs-plus'