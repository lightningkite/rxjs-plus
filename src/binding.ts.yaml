
- id: com.lightningkite.rx.android.subscribeAutoDispose
  type: call
  template:
    pattern: '~this~.pipe(subscribeAutoDispose(~0~, ~1~))'
    imports:
      subscribeAutoDispose: rxjs-plus

- id: com.lightningkite.rx.android.subscribeAutoDisposeNullable
  type: call
  template:
    pattern: '~this~.pipe(subscribeAutoDispose(~0~, ~1~))'
    imports:
      subscribeAutoDispose: rxjs-plus

- id: com.lightningkite.rx.android.onClick
  type: call
  template:
    pattern: "onThrottledEventDo(~this~, 'click', ~1~)"
    imports:
      onThrottledEventDo: rxjs-plus

- id: com.lightningkite.rx.android.onClick
  type: call
  arguments: [Observable, Long, function]
  template:
    pattern: "onThrottledEventDoWith(~this~, 'click', ~0~, ~2~)"
    imports:
      onThrottledEventDoWith: rxjs-plus

- id: com.lightningkite.rx.android.onClickNullable
  type: call
  arguments: [Observable, Long, function]
  template:
    pattern: "onThrottledEventDoWith(~this~, 'click', ~0~, ~2~)"
    imports:
      onThrottledEventDoWith: rxjs-plus

- id: com.lightningkite.rx.android.onLongClick
  type: call
  template:
    pattern: "onThrottledEventDo(~this~, 'contextmenu', ~1~)"
    imports:
      onThrottledEventDo: rxjs-plus

- id: com.lightningkite.rx.android.onLongClick
  type: call
  arguments: [Observable, Long, function]
  template:
    pattern: "onThrottledEventDoWith(~this~, 'contextmenu', ~0~, ~2~)"
    imports:
      onThrottledEventDoWith: rxjs-plus

- id: com.lightningkite.rx.android.onLongClickNullable
  type: call
  arguments: [Observable, Long, function]
  template:
    pattern: "onThrottledEventDoWith(~this~, 'contextmenu', ~0~, ~2~)"
    imports:
      onThrottledEventDoWith: rxjs-plus

- id: com.lightningkite.rx.android.removed
  type: get
  template:
    pattern: "elementRemoved(~this~)"
    imports:
      elementRemoved: rxjs-plus

- id: com.lightningkite.rx.android.visible
  type: get
  reflectiveName:
    pattern: viewVisible
    imports:
      viewVisible: rxjs-plus
  template: (~this~.style.visibility == "visible")

- id: com.lightningkite.rx.android.visible
  type: set
  reflectiveName:
    pattern: viewVisible
    imports:
      viewVisible: rxjs-plus
  template: '~this~.style.visibility = ~value~ ? "visible" : ""'

- id: com.lightningkite.rx.android.exists
  type: get
  reflectiveName:
    pattern: viewExists
    imports:
      viewExists: rxjs-plus
  template: (!~this~.hidden)

- id: com.lightningkite.rx.android.exists
  type: set
  reflectiveName:
    pattern: viewExists
    imports:
      viewExists: rxjs-plus
  template: '~this~.hidden = !~value~'

- id: com.lightningkite.rx.android.bind
  type: call
  arguments: [EditText]
  template:
    pattern: '~this~.pipe(bind(~0~, "value", "input"))'
    imports:
      bind: rxjs-plus

- id: com.lightningkite.rx.android.bind
  type: call
  arguments: [SeekBar]
  template:
    pattern: '~this~.pipe(bind(~0~, "valueAsNumber", "input"))'
    imports:
      bind: rxjs-plus

- id: com.lightningkite.rx.android.bind
  type: call
  arguments: [CompoundButton]
  template:
    pattern: '~this~.pipe(bind(~0~, "checked", "input"))'
    imports:
      bind: rxjs-plus

- id: com.lightningkite.rx.android.bindNoUncheck
  type: call
  arguments: [CompoundButton]
  template:
    pattern: '~this~.pipe(bindNoUncheck(~0~))'
    imports:
      bindNoUncheck: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [RecyclerView, function]
  template:
    pattern: '~this~.pipe(showIn(~0~, ~1~))'
    imports:
      showIn: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [RecyclerView, function, function]
  template:
    pattern: '~this~.pipe(showInTyped(~0~, ~1~, ~2~))'
    imports:
      showInTyped: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [LinearLayout, function]
  template:
    pattern: '~this~.pipe(showIn(~0~, ~1~))'
    imports:
      showIn: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [LinearLayout, function, function]
  template:
    pattern: '~this~.pipe(showInTyped(~0~, ~1~, ~2~))'
    imports:
      showInTyped: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [Spinner, Subject, function]
  suppliedArguments: [spinner, selected]
  template:
    pattern: '~this~.pipe(showInSelect(~0~, ~1~))'
    imports:
      showInSelect: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [Spinner, Subject, function]
  suppliedArguments: [spinner, selected, toString]
  template:
    pattern: '~this~.pipe(showInSelect(~0~, ~1~, ~2~))'
    imports:
      showInSelect: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [AutoCompleteTextView, '*']
  suppliedArguments: [autoCompleteTextView, onItemSelected]
  template:
    pattern: '~this~.pipe(showInInput(~*~))'
    imports:
      showInInput: rxjs-plus

- id: com.lightningkite.rx.android.showIn
  type: call
  arguments: [AutoCompleteTextView, '*', '*']
  suppliedArguments: [autoCompleteTextView, onItemSelected]
  template:
    pattern: '~this~.pipe(showInInput(~*~))'
    imports:
      showInInput: rxjs-plus

- id: com.lightningkite.rx.android.StringResource
  type: type
  template: string

- id: com.lightningkite.rx.android.ColorResource
  type: type
  template: string

- id: com.lightningkite.rx.android.DrawableResource
  type: type
  template: string
