- id: com.lightningkite.rx.forever
  type: call
  template: ~this~

- id: com.lightningkite.rx.subscribeByNullable
  type: call
  template: ~this~.subscribe(~0~)

- id: com.lightningkite.rx.isEqualTo
  type: call
  template:
    pattern: ~this~.pipe(combineLatestWith(~0~), mapCall(safeEq))
    imports:
      combineLatestWith: rxjs
      mapCall: rxjs-plus
      safeEq: khrysalis-runtime

- id: com.lightningkite.rx.notEqualTo
  type: call
  template:
    pattern: ~this~.pipe(combineLatestWith(~0~), mapCall(safeEq), map(not))
    imports:
      combineLatestWith: rxjs
      mapCall: rxjs-plus
      not: rxjs-plus
      safeEq: khrysalis-runtime

- id: com.lightningkite.rx.notEqualTo
  type: call
  template:
    pattern: ~this~.pipe(subjectIsEqualTo(~0~))
    imports:
      subjectIsEqualTo: rxjs-plus

- id: com.lightningkite.rx.notEqualTo
  type: call
  template:
    pattern: ~this~.pipe(subjectIsNotEqualTo(~0~))
    imports:
      subjectIsNotEqualTo: rxjs-plus

- id: com.lightningkite.rx.ValueSubject
  type: type
  template:
    pattern: BehaviorSubject<~T0~>
    imports:
      BehaviorSubject: rxjs

- id: com.lightningkite.rx.ValueSubject
  type: call
  hasExplicitTypeArguments: true
  template:
    pattern: new BehaviorSubject<~T0~>(~0~)
    imports:
      BehaviorSubject: rxjs

- id: com.lightningkite.rx.ValueSubject
  type: call
  template:
    pattern: new BehaviorSubject(~0~)
    imports:
      BehaviorSubject: rxjs

- id: com.lightningkite.rx.HasValueSubject.value
  type: set
  template: ~this~.next(~value~)

- id: com.lightningkite.rx.get
  type: call
  receiver: HasValueSubject
  template:
    pattern: ~this~.pipe(subjectProperty(~0~))
    imports:
      subjectProperty: rxjs-plus

- id: com.lightningkite.rx.isIn
  type: call
  template:
    pattern: ~0~.pipe(call("has", ~this~))
    imports:
      call: rxjs-plus

- id: com.lightningkite.rx.notIn
  type: call
  template:
    pattern: ~0~.pipe(call("has", ~this~), map(not))
    imports:
      call: rxjs-plus
      not: rxjs-plus

- id: com.lightningkite.rx.contains
  type: call
  template:
    pattern: ~this~.pipe(contains(~0~))
    imports:
      contains: rxjs-plus

- id: com.lightningkite.rx.doesNotContain
  type: call
  template:
    pattern: ~this~.pipe(contains(~0~), mapReversible(not))
    imports:
      contains: rxjs-plus
      mapReversible: rxjs-plus
      not: rxjs-plus

- id: com.lightningkite.rx.and
  type: call
  template:
    pattern: ~this~.pipe(combineLatestWith(~0~), mapCall(and))
    imports:
      combineLatestWith: rxjs
      and: rxjs-plus

- id: com.lightningkite.rx.or
  type: call
  template:
    pattern: ~this~.pipe(combineLatestWith(~0~), mapCall(or))
    imports:
      combineLatestWith: rxjs
      or: rxjs-plus

- id: com.lightningkite.rx.not
  type: call
  template:
    pattern: ~this~.pipe(mapReversible(not))
    imports:
      mapReversible: rxjs-plus
      not: rxjs-plus

- id: com.lightningkite.rx.toSubjectString
  type: call
  receiver: Subject<Double>
  template:
    pattern: ~this~.pipe(floatToString)
    imports:
      floatToString: rxjs-plus

- id: com.lightningkite.rx.toSubjectString
  type: call
  receiver: Subject<Int>
  template:
    pattern: ~this~.pipe(intToString)
    imports:
      intToString: rxjs-plus

- id: com.lightningkite.rx.toSubjectString
  type: call
  receiver: Subject<Optional<Double>>
  template:
    pattern: ~this~.pipe(floatToStringNullable)
    imports:
      floatToStringNullable: rxjs-plus

- id: com.lightningkite.rx.toSubjectString
  type: call
  receiver: Subject<Optional<Int>>
  template:
    pattern: ~this~.pipe(intToStringNullable)
    imports:
      intToStringNullable: rxjs-plus

- id: com.lightningkite.rx.toSubjectInt
  type: call
  template:
    pattern: ~this~.pipe(mapSubject(x => Math.floor(x), x => x))
    imports:
      mapSubject: rxjs-plus

- id: com.lightningkite.rx.toSubjectFloat
  type: call
  template:
    pattern: ~this~.pipe(mapSubject(x => x, x => Math.floor(x)))
    imports:
      mapSubject: rxjs-plus

- id: com.lightningkite.rx.plus
  type: call
  template:
    pattern: ~this~.pipe(mapReversible(plusNumber(~0~)))
    imports:
      mapReversible: rxjs-plus
      plusNumber: rxjs-plus

- id: com.lightningkite.rx.minus
  type: call
  template:
    pattern: ~this~.pipe(mapReversible(minusNumber(~0~)))
    imports:
      mapReversible: rxjs-plus
      minusNumber: rxjs-plus

- id: com.lightningkite.rx.times
  type: call
  template:
    pattern: ~this~.pipe(mapReversible(timesNumber(~0~)))
    imports:
      mapReversible: rxjs-plus
      timesNumber: rxjs-plus

- id: com.lightningkite.rx.div
  type: call
  template:
    pattern: ~this~.pipe(mapReversible(divNumber(~0~)))
    imports:
      mapReversible: rxjs-plus
      divNumber: rxjs-plus

- id: com.lightningkite.rx.map
  type: call
  template:
    pattern: '~this~.pipe(mapSubject(~0~, ~1~))'
    imports:
      mapSubject: rxjs-plus

- id: com.lightningkite.rx.mapMaybeWrite
  type: call
  template:
    pattern: '~this~.pipe(mapSubjectMaybeWrite(~0~, ~1~))'
    imports:
      mapSubjectMaybeWrite: rxjs-plus

- id: com.lightningkite.rx.mapWithExisting
  type: call
  template:
    pattern: '~this~.pipe(mapSubjectWithExisting(~0~, ~1~))'
    imports:
      mapSubjectWithExisting: rxjs-plus

- id: com.lightningkite.rx.withWrite
  receiver: Subject
  type: call
  template:
    pattern: '~this~.pipe(withWrite(~0~))'
    imports:
      withWrite: rxjs-plus

- id: com.lightningkite.rx.notNull
  type: call
  template:
    pattern: '~this~.pipe(filter((x): x is ~T0~ => x !== null))'
    imports:
      filter: rxjs

- id: com.lightningkite.rx.mapNotNull
  type: call
  template:
    pattern: '~this~.pipe(map(~0~), filter((x): x is ~T1~ => x !== null))'
    imports:
      map: rxjs
      filter: rxjs

- id: com.lightningkite.rx.mapNullable
  type: call
  template:
    pattern: '~this~.pipe(map(~0~))'
    imports:
      map: rxjs

- id: com.lightningkite.rx.mapToNullable
  type: call
  template:
    pattern: '~this~.pipe(map(~0~))'
    imports:
      map: rxjs

- id: com.lightningkite.rx.mapFromNullable
  type: call
  template:
    pattern: '~this~.pipe(map(~0~))'
    imports:
      map: rxjs

- id: com.lightningkite.rx.flatMapNotNull
  type: call
  template:
    pattern: '~this~.pipe(mergeMapNotNull(~0~))'
    imports:
      mergeMapNotNull: rxjs-plus

- id: com.lightningkite.rx.switchMapNotNull
  type: call
  template:
    pattern: '~this~.pipe(switchMapNotNull(~0~))'
    imports:
      switchMapNotNull: rxjs-plus

- id: com.lightningkite.rx.combineLatest
  reciever: Observable
  type: call
  template:
    pattern: '~this~.pipe(combineLatestWith(~0~), map(~1~))'
    imports:
      combineLatestWith: rxjs
      map: rxjs

- id: com.lightningkite.rx.combineLatest
  reciever: List
  type: call
  template:
    pattern: 'combineLatest(~this~, ~0~)'
    imports:
      combineLatest: rxjs

- id: com.lightningkite.rx.combineLatest
  reciever: List
  arguments: []
  type: call
  template:
    pattern: 'combineLatest(~this~)'
    imports:
      combineLatest: rxjs

- id: com.lightningkite.rx.zip
  type: call
  template:
    pattern: 'zip(~this~)'
    imports:
      zip: rxjs

- id: com.lightningkite.rx.working
  type: call
  template:
    pattern: '~this~.pipe(setOnWhileActive(~0~))'
    imports:
      setOnWhileActive: rxjs-plus
